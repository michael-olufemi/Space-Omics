Loading bowtie version 2.4.5
Writing bisulfite genomes out into a single MFA (multi FastA) file

Bisulfite Genome Indexer version v0.24.2 (last modified: 19 May 2022)

Step I - Prepare genome folders - completed



Total number of conversions performed:
C->T:	557931426
G->A:	558020630

Step II - Genome bisulfite conversions - completed


Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer
Please be aware that this process can - depending on genome size - take several hours!
Settings:
Settings:
  Output files: "BS_CT.*.bt2l"
  Output files: "BS_GA.*.bt2l"
  Line rate: 7 (line is 128 bytes)
  Line rate: 7 (line is 128 bytes)
  Lines per side: 1 (side is 128 bytes)
  Lines per side: 1 (side is 128 bytes)
  Offset rate: 4 (one in 16)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  FTable chars: 10
  Strings: unpacked
  Strings: unpacked
  Max bucket size: default
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Difference-cover sample period: 1024
  Endianness: little
  Endianness: little
  Actual local endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Sanity checking: disabled
  Assertions: disabled
  Assertions: disabled
  Random seed: 0
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
Input files DNA, FASTA:
  genome_mfa.CT_conversion.fa
  genome_mfa.GA_conversion.fa
Building a LARGE index
Reading reference sizes
Building a LARGE index
Reading reference sizes
  Time reading reference sizes: 00:01:04
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time reading reference sizes: 00:01:05
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:47
bmax according to bmaxDivN setting: 669332927
Using parameters --bmax 501999696 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 501999696 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  Time to join reference sequences: 00:00:49
bmax according to bmaxDivN setting: 669332927
Using parameters --bmax 501999696 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 501999696 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:49
  Allocating rank array
  Ranking v-sort output
  V-Sorting samples time: 00:00:49
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:21
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Invoking Larsson-Sadakane on ranks time: 00:00:21
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.34666e+08 (target: 501999695)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (501999696) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 144870843 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.82476e+08 (target: 501999695)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (501999696) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  Sorting block time: 00:00:50
Returning block of 144870844 for bucket 1
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
Getting block 2 of 8
  Reserving size (501999696) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 1: 90%
  bucket 2: 10%
  bucket 1: 100%
  Sorting block of length 440958418 for bucket 1
  (Using difference cover)
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 382138741 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:34
Returning block of 440958419 for bucket 1
  Sorting block time: 00:02:16
Returning block of 382138742 for bucket 2
Getting block 3 of 8
  Reserving size (501999696) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
Getting block 2 of 7
  Reserving size (501999696) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 3: 10%
  bucket 2: 10%
  bucket 3: 20%
  bucket 2: 20%
  bucket 3: 30%
  bucket 2: 30%
  bucket 3: 40%
  bucket 2: 40%
  bucket 3: 50%
  bucket 2: 50%
  bucket 3: 60%
  bucket 2: 60%
  bucket 3: 70%
  bucket 2: 70%
  bucket 3: 80%
  bucket 2: 80%
  bucket 3: 90%
  bucket 2: 90%
  bucket 3: 100%
  Sorting block of length 460449445 for bucket 3
  (Using difference cover)
  bucket 2: 100%
  Sorting block of length 374398562 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:09
Returning block of 374398563 for bucket 2
Getting block 3 of 7
  Reserving size (501999696) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  Sorting block time: 00:02:50
Returning block of 460449446 for bucket 3
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 445702661 for bucket 3
  (Using difference cover)
Getting block 4 of 8
  Reserving size (501999696) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 228760540 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:20
Returning block of 228760541 for bucket 4
Getting block 5 of 8
  Reserving size (501999696) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  Sorting block time: 00:02:34
Returning block of 445702662 for bucket 3
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 445977216 for bucket 5
  (Using difference cover)
Getting block 4 of 7
  Reserving size (501999696) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 391807967 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:41
Returning block of 445977217 for bucket 5
  Sorting block time: 00:02:15
Returning block of 391807968 for bucket 4
Getting block 6 of 8
  Reserving size (501999696) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
Getting block 5 of 7
  Reserving size (501999696) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 6: 50%
  bucket 5: 10%
  bucket 6: 60%
  bucket 5: 20%
  bucket 6: 70%
  bucket 5: 30%
  bucket 6: 80%
  bucket 5: 40%
  bucket 6: 90%
  bucket 5: 50%
  bucket 6: 100%
  Sorting block of length 373619719 for bucket 6
  (Using difference cover)
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 477961264 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:16
Returning block of 373619720 for bucket 6
Getting block 7 of 8
  Reserving size (501999696) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  Sorting block time: 00:02:44
Returning block of 477961265 for bucket 5
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 368961263 for bucket 7
  (Using difference cover)
Getting block 6 of 7
  Reserving size (501999696) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 493675850 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:14
Returning block of 368961264 for bucket 7
Getting block 8 of 8
  Reserving size (501999696) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 272553935 for bucket 8
  (Using difference cover)
  Sorting block time: 00:02:53
Returning block of 493675851 for bucket 6
Getting block 7 of 7
  Reserving size (501999696) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 52826981 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:41
Returning block of 272553936 for bucket 8
  Sorting block time: 00:00:18
Returning block of 52826982 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1338255578
fchr[G]: 1896187004
fchr[T]: 1896187004
fchr[$]: 2677331709
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 900857264 bytes to primary EBWT file: BS_GA.1.bt2l.tmp
Wrote 1338665860 bytes to secondary EBWT file: BS_GA.2.bt2l.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2677331709
    bwtLen: 2677331710
    sz: 669332928
    bwtSz: 669332928
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 167333232
    offsSz: 1338665856
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 6972218
    numLines: 6972218
    ebwtTotLen: 892443904
    ebwtTotSz: 892443904
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:28:05
Reading reference sizes
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 780234948
fchr[G]: 780234948
fchr[T]: 1338255578
fchr[$]: 2677331709
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 900857264 bytes to primary EBWT file: BS_CT.1.bt2l.tmp
Wrote 1338665860 bytes to secondary EBWT file: BS_CT.2.bt2l.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2677331709
    bwtLen: 2677331710
    sz: 669332928
    bwtSz: 669332928
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 167333232
    offsSz: 1338665856
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 6972218
    numLines: 6972218
    ebwtTotLen: 892443904
    ebwtTotSz: 892443904
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:28:10
Reading reference sizes
  Time reading reference sizes: 00:00:26
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time reading reference sizes: 00:00:26
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:46
  Time to reverse reference sequence: 00:00:01
bmax according to bmaxDivN setting: 669332927
Using parameters --bmax 501999696 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 501999696 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  Time to join reference sequences: 00:00:49
  Time to reverse reference sequence: 00:00:01
bmax according to bmaxDivN setting: 669332927
Using parameters --bmax 501999696 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 501999696 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:48
  Allocating rank array
  Ranking v-sort output
  V-Sorting samples time: 00:00:49
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:18
  Invoking Larsson-Sadakane on ranks
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:21
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Invoking Larsson-Sadakane on ranks time: 00:00:21
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.82476e+08 (target: 501999695)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (501999696) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 401928066 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.82476e+08 (target: 501999695)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (501999696) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 345421186 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:25
Returning block of 401928067 for bucket 1
Getting block 2 of 7
  Reserving size (501999696) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  Sorting block time: 00:02:01
Returning block of 345421187 for bucket 1
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 467979674 for bucket 2
  (Using difference cover)
Getting block 2 of 7
  Reserving size (501999696) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 347397605 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:00
Returning block of 347397606 for bucket 2
  Sorting block time: 00:02:49
Returning block of 467979675 for bucket 2
Getting block 3 of 7
  Reserving size (501999696) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
Getting block 3 of 7
  Reserving size (501999696) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 100%
  Sorting block of length 472270723 for bucket 3
  (Using difference cover)
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 332621563 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:58
Returning block of 332621564 for bucket 3
  Sorting block time: 00:02:43
Returning block of 472270724 for bucket 3
Getting block 4 of 7
  Reserving size (501999696) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
Getting block 4 of 7
  Reserving size (501999696) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 100%
  Sorting block of length 498913515 for bucket 4
  (Using difference cover)
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 347189840 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:59
Returning block of 347189841 for bucket 4
Getting block 5 of 7
  Reserving size (501999696) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  Sorting block time: 00:03:02
Returning block of 498913516 for bucket 4
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 276407392 for bucket 5
  (Using difference cover)
Getting block 5 of 7
  Reserving size (501999696) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 460331146 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:35
Returning block of 276407393 for bucket 5
Getting block 6 of 7
  Reserving size (501999696) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 416502405 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:47
Returning block of 460331147 for bucket 5
Getting block 6 of 7
  Reserving size (501999696) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 162124438 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:25
Returning block of 416502406 for bucket 6
Getting block 7 of 7
  Reserving size (501999696) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  Sorting block time: 00:00:57
Returning block of 162124439 for bucket 6
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 472142552 for bucket 7
  (Using difference cover)
Getting block 7 of 7
  Reserving size (501999696) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 353433301 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:10
Returning block of 353433302 for bucket 7
  Sorting block time: 00:02:46
Returning block of 472142553 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 780234948
fchr[G]: 780234948
fchr[T]: 1338255578
fchr[$]: 2677331709
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 900857264 bytes to primary EBWT file: BS_CT.rev.1.bt2l.tmp
Wrote 1338665860 bytes to secondary EBWT file: BS_CT.rev.2.bt2l.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2677331709
    bwtLen: 2677331710
    sz: 669332928
    bwtSz: 669332928
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 167333232
    offsSz: 1338665856
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 6972218
    numLines: 6972218
    ebwtTotLen: 892443904
    ebwtTotSz: 892443904
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:27:02
Renaming BS_CT.3.bt2l.tmp to BS_CT.3.bt2l
Renaming BS_CT.4.bt2l.tmp to BS_CT.4.bt2l
Renaming BS_CT.1.bt2l.tmp to BS_CT.1.bt2l
Renaming BS_CT.2.bt2l.tmp to BS_CT.2.bt2l
Renaming BS_CT.rev.1.bt2l.tmp to BS_CT.rev.1.bt2l
Renaming BS_CT.rev.2.bt2l.tmp to BS_CT.rev.2.bt2l
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1338255578
fchr[G]: 1896187004
fchr[T]: 1896187004
fchr[$]: 2677331709
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 900857264 bytes to primary EBWT file: BS_GA.rev.1.bt2l.tmp
Wrote 1338665860 bytes to secondary EBWT file: BS_GA.rev.2.bt2l.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2677331709
    bwtLen: 2677331710
    sz: 669332928
    bwtSz: 669332928
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 167333232
    offsSz: 1338665856
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 6972218
    numLines: 6972218
    ebwtTotLen: 892443904
    ebwtTotSz: 892443904
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:27:22
Renaming BS_GA.3.bt2l.tmp to BS_GA.3.bt2l
Renaming BS_GA.4.bt2l.tmp to BS_GA.4.bt2l
Renaming BS_GA.1.bt2l.tmp to BS_GA.1.bt2l
Renaming BS_GA.2.bt2l.tmp to BS_GA.2.bt2l
Renaming BS_GA.rev.1.bt2l.tmp to BS_GA.rev.1.bt2l
Renaming BS_GA.rev.2.bt2l.tmp to BS_GA.rev.2.bt2l

=========================================

Parallel genome indexing complete. Enjoy!

